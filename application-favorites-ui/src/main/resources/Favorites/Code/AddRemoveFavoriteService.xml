<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Favorites.Code.AddRemoveFavoriteService" locale="">
  <web>Favorites.Code</web>
  <name>AddRemoveFavoriteService</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Favorites.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity wiki="false"}}
#if ($request.outputSyntax == 'plain')
  #set ($actionToPerform = 'add')
  #if ("$!request.action" == 'remove')
    #set ($actionToPerform = 'remove')
  #end
  #if ("$!request.docRef" != '' &amp;&amp; $xcontext.userReference == $request.userRef)
    ## get the user document for which we're making changes
    #set ($userDoc = $xwiki.getDocument($request.userRef))
    ## prepare the reference of the doc to add to favorites, relative to the user doc:
    ## when single wiki this will always store page fullnames,
    ## when multi wiki this will store a mix of fullnames &amp; prefixed fullnames
    #set ($requestDocRef = $services.model.resolveDocument($request.docRef))
    #set ($favDocFullName = $services.model.serialize($requestDocRef, 'compactwiki', $userDoc.documentReference))
    #if ($actionToPerform == 'add')
      #if ($xwiki.exists($request.docRef))
        ## Create the favorites object if it does not exist.
        #set ($favObj = $userDoc.getObject('Favorites.Code.FavoritesClass', true))
        #set ($favDocs = $favObj.getValue('pages'))
        ## Initialize the list of favorite documents upon object creation.
        #if (!$favDocs)
          #set ($favDocs = [])
        #end
        ## add the reference only if it's not already stored
        #if ($favDocs.contains($favDocFullName))
          #set ($message = $services.localization.render('favorites.user.addCurrentPage.alreadyExists'))
          #set ($json = {'message': $message, 'status': 'warning'})
        #else
          #set ($discard = $favDocs.add($favDocFullName))
          #set ($discard = $favObj.set('pages', $favDocs))
          #set ($discard = $userDoc.save($services.localization.render('favorites.user.updateProfile')))
          #set ($message = $services.localization.render('favorites.user.addCurrentPage.success'))
          #set ($json = {'message': $message, 'status': 'done'})
        #end
      #else
        #set ($message = $services.localization.render('favorites.user.addCurrentPage.fail'))
        #set ($json = {'message': $message, 'status': 'error'})
      #end
    #elseif ($actionToPerform == 'remove')
      ## remove this reference from the user favorites, if it's there
      #set ($favObj = $userDoc.getObject('Favorites.Code.FavoritesClass'))
      #set ($favDocs = $favObj.getValue('pages'))
      #if ($favDocs &amp;&amp; $favDocs.contains($favDocFullName))
        #set($discard = $favDocs.remove($favDocFullName))
        #set($discard = $favObj.set('pages', $favDocs))
        #set ($discard = $userDoc.save($services.localization.render('favorites.user.updateProfile')))
        #set ($message = $services.localization.render('favorites.user.removeCurrentPage.success'))
        #set ($json = {'message': $message, 'status': 'done'})
      #else
        #set ($message = $services.localization.render('favorites.user.removeCurrentPage.doesntExist'))
        #set ($json = {'message': $message, 'status': 'warning'})
      #end
    #end
  #else
    #set ($message = $services.localization.render('favorites.user.addRemoveOperation.fail'))
    #set ($json = {'message': $message, 'status': 'error'})
  #end
  #set ($discard = $response.setContentType('application/json'))
  $jsontool.serialize($json)
#end
{{/velocity}}</content>
</xwikidoc>
